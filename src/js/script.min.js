"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
document.addEventListener('DOMContentLoaded', function () {
  var setLangBtn = document.querySelector('.switch-language__btn');
  var setLangDropdown = document.querySelector('.switch-language__dropdown');
  var setLangDropdownEls = document.querySelectorAll('.switch-language__dropdown-element');
  var menuBackdrop = document.querySelector('.backdrop');
  var menuDropdownLink = document.querySelector('.menu-item__dropdown');
  var header = document.querySelector('.header');
  setLangBtn.addEventListener('click', function (e) {
    e.preventDefault();
    setLangDropdown.classList.toggle('switch-language__dropdown--active');
    if (!header.classList.contains('header__dropdown--active')) {
      menuBackdrop.classList.toggle('backdrop--active');
    }
    menuBackdrop.addEventListener('click', function () {
      menuBackdrop.classList.remove('backdrop--active');
      setLangDropdown.classList.remove('switch-language__dropdown--active');
    });
  });
  menuDropdownLink.addEventListener('click', function (e) {
    e.preventDefault();
    if (!setLangDropdown.classList.contains('switch-language__dropdown--active')) {
      menuBackdrop.classList.toggle('backdrop--active');
    }
    header.classList.toggle('header__dropdown--active');
    menuBackdrop.addEventListener('click', function () {
      menuBackdrop.classList.remove('backdrop--active');
      header.classList.remove('header__dropdown--active');
    });
  });

  //mobile menu
  var burgerBtn = header.querySelector('.burger-btn');
  burgerBtn.addEventListener('click', function () {
    header.classList.toggle('mobile-menu--active');
    if (header.classList.contains('mobile-menu--active')) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = 'visible';
    }
  });
  var mobileDropdownBtns = header.querySelectorAll('.mobile-menu__dropdown-btn');
  mobileDropdownBtns.forEach(function (btn) {
    btn.addEventListener('click', function () {
      btn.classList.toggle('mobile-dropdown--active');
    });
  });
  var formTopicInput = document.querySelector('.form__topic');
  var formTopicDropdown = document.querySelector('.topic__dropdown');
  if (formTopicInput) {
    formTopicInput.addEventListener('click', function (e) {
      if (e.target.classList.contains('topic__dropdown-item')) {
        formTopicInput.querySelector('.input-placeholder').innerHTML = e.target.innerHTML;
        formTopicInput.querySelector('#form-topic').setAttribute('value', e.target.innerHTML);
      }
      console.log(e.target);
      formTopicInput.classList.toggle('topic__dropdown--active');
    });
  }

  // templates accordion
  // const accordionHeaders = document.querySelectorAll('.templates__list-element-header');
  // if (accordionHeaders){
  //     accordionHeaders.forEach((header) => {
  //         header.addEventListener('click', () => {
  //             header.classList.toggle('templates__list-element--active');
  //         });
  //     });
  // }
  var ItcAccordion = /*#__PURE__*/function () {
    function ItcAccordion(target, config) {
      _classCallCheck(this, ItcAccordion);
      this._el = typeof target === 'string' ? document.querySelector(target) : target;
      var defaultConfig = {
        alwaysOpen: true,
        duration: 350
      };
      this._config = Object.assign(defaultConfig, config);
      this.addEventListener();
    }
    _createClass(ItcAccordion, [{
      key: "addEventListener",
      value: function addEventListener() {
        var _this = this;
        this._el.addEventListener('click', function (e) {
          var elHeader = e.target.closest('.accordion__header');
          if (!elHeader) {
            return;
          }
          if (!_this._config.alwaysOpen) {
            var elOpenItem = _this._el.querySelector('.accordion__item_show');
            if (elOpenItem) {
              elOpenItem !== elHeader.parentElement ? _this.toggle(elOpenItem) : null;
            }
          }
          _this.toggle(elHeader.parentElement);
        });
      }
    }, {
      key: "show",
      value: function show(el) {
        var elBody = el.querySelector('.accordion__body');
        if (elBody.classList.contains('collapsing') || el.classList.contains('accordion__item_show')) {
          return;
        }
        elBody.style['display'] = 'block';
        var height = elBody.offsetHeight;
        elBody.style['height'] = 0;
        elBody.style['overflow'] = 'hidden';
        elBody.style['transition'] = "height ".concat(this._config.duration, "ms ease");
        elBody.classList.add('collapsing');
        el.classList.add('accordion__item_slidedown');
        elBody.offsetHeight;
        elBody.style['height'] = "".concat(height, "px");
        window.setTimeout(function () {
          elBody.classList.remove('collapsing');
          el.classList.remove('accordion__item_slidedown');
          elBody.classList.add('collapse');
          el.classList.add('accordion__item_show');
          elBody.style['display'] = '';
          elBody.style['height'] = '';
          elBody.style['transition'] = '';
          elBody.style['overflow'] = '';
        }, this._config.duration);
      }
    }, {
      key: "hide",
      value: function hide(el) {
        var elBody = el.querySelector('.accordion__body');
        if (elBody.classList.contains('collapsing') || !el.classList.contains('accordion__item_show')) {
          return;
        }
        elBody.style['height'] = "".concat(elBody.offsetHeight, "px");
        elBody.offsetHeight;
        elBody.style['display'] = 'block';
        elBody.style['height'] = 0;
        elBody.style['overflow'] = 'hidden';
        elBody.style['transition'] = "height ".concat(this._config.duration, "ms ease");
        elBody.classList.remove('collapse');
        el.classList.remove('accordion__item_show');
        elBody.classList.add('collapsing');
        window.setTimeout(function () {
          elBody.classList.remove('collapsing');
          elBody.classList.add('collapse');
          elBody.style['display'] = '';
          elBody.style['height'] = '';
          elBody.style['transition'] = '';
          elBody.style['overflow'] = '';
        }, this._config.duration);
      }
    }, {
      key: "toggle",
      value: function toggle(el) {
        el.classList.contains('accordion__item_show') ? this.hide(el) : this.show(el);
      }
    }]);
    return ItcAccordion;
  }();
  new ItcAccordion(document.querySelector('.accordion'), {
    alwaysOpen: true
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
